package client;

import common.*;
import java.awt.Desktop;
import java.net.URI;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Matteo Cacciarino, 748231, Lorenzo Erba, 748702,Ferialdo Elezi
 * 749721,Alessandro Zancanella 751494, sede CO
 *
 * Classe rappresentante il pannello che visualizza l'elenco dei brani della
 * playlist.
 */
public class Gui_ElencoBrani extends javax.swing.JPanel {

    private final String idUtente; // Attributo contenente l'id utente
    private Playlist pl; // Oggetto di tipo playlist, contiene la playlist selezionata
    private EmotionalSongs previousframe; // Frame iniziale
    private InterfacciaServizio is;

    /**
     * Costruttore parametrico che inizializza tutti gli attributi
     *
     * @param idUtente parametro di tipo String contenente l'id dell'utente
     * @param pl parametro di tipo Playlist, contenente la playlist selezionata
     * @param previousFrame parametro di tipo SchermataPlaylist contenente il
     * riferimento al Frame iniziale
     */
    public Gui_ElencoBrani(String userId, Playlist pl, EmotionalSongs emo, InterfacciaServizio is) {
        initComponents();
        this.idUtente = userId;
        this.pl = pl;
        this.previousframe = emo; // Frame iniziale
        this.is=is;
        visualizzaBraniPlaylist(); // Chiama il metodo che riempe la tabella di brani della playlist
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        jTable2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html> <h3>Nome brano", "<html> <h3>Autore", "<html> <h3>Anno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("<html><h1 style=\"font-size:185%;color:green;\"><u>Elenco brani</h1></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(228, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Evento per ascoltare la canzone quando viene selezionata una riga della tabella

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        //Getto la tabella
        JTable source = (JTable) evt.getSource();
        //Prendo la riga selezionata
        int row = source.rowAtPoint(evt.getPoint());

        // Prendo il titolo, autore e il link youtube del brano selezionato
        String titolo = source.getValueAt(row, 0).toString();
        String autore = source.getValueAt(row, 1).toString();
        String anno = source.getValueAt(row, 2).toString();

        // Rendo il pannello successivo visibile
        JDialog pnlEmozioni = new JDialog(this.previousframe, "PannelloEmozioni", true);
        pnlEmozioni.getContentPane().add(new PannelloEmozioni(idUtente, titolo, autore,Integer.valueOf(anno), previousframe, is, pl.getIdPlaylist()));
        pnlEmozioni.pack();
        
        pnlEmozioni.setVisible(true); // Visualizzo pannello emozioni*/
       
    }//GEN-LAST:event_jTable2MouseClicked

    /**
     * Metodo che riempe la tabella con i brani contenuti nella playlist
     * selezionata
     */
    public void visualizzaBraniPlaylist() {
        
        //Creazione della tabella
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        // Arraylist di tipo canzone, conterrà i brani della playlist
        ArrayList<Canzoni> brani = new ArrayList<Canzoni>();
        
        try {
            // Chiamo il metodo getBrani sulla playlist, per ottenere i brani
            brani = is.getCanzoniFromPlaylist(pl.getIdPlaylist());
        }  catch (CanzoneInesistente ex) {
            JOptionPane.showMessageDialog(null, "Canzone inesistente", "Errore", JOptionPane.WARNING_MESSAGE);
        }  catch (RemoteException |MyServerException ex) {
            JOptionPane.showMessageDialog(null, "Errore", "Errore", JOptionPane.WARNING_MESSAGE);
        }
        
        // Creo un Vector di tipo String, che serve per inserire i brani nella tabella
        Vector<String> vector = new Vector<>();
        model.setRowCount(0); // Serve per resettare la tabella

        // For che inserisce tutti i brani nella tabella
        for (int i = 0; i < brani.size(); i++) {
            // Metodo che trasforma l'ArrayList in un Vector
            vector = transform(i, brani);
            if (vector.get(0).equals("Errore #B0001.indexNonValido")) {
                JOptionPane.showMessageDialog(null, vector.get(0), "Errore", JOptionPane.ERROR_MESSAGE);
                break;
            } else {
                // Aggiungo la riga
                model.addRow(vector);
            }

        }

    }

    /**
     * Metodo che trasforma i brani in un Vector per poterli inserire in una
     * jTable
     *
     * @param index parametro di tipo int contenente l'indice corrente
     * @param brani ArrayList di tipo Canzone, che è da convertire
     */
    private Vector<String> transform(int index, ArrayList<Canzoni> brani) {
        Vector<String> vector = new Vector<>();
        if (index < brani.size()) {
            // Aggiungo le varie informazioni del brano
            vector.add(brani.get(index).getTitolo());
            vector.add(brani.get(index).getAutore());
            vector.add(String.valueOf(brani.get(index).getAnno()));
            return vector;
        } else {
            vector.add("Errore #B0001.indexNonValido"); // Errore 
            return vector;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
