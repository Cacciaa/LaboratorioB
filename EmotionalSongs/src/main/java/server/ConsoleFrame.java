/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package server;

import common.Canzoni;
import common.DatiNonValidi;
import common.PasswordErrata;
import common.PlaylistInesistenti;
import common.InterfacciaServizio;
import common.EmozioniInesistenti;
import common.Emozioni;
import common.CanzoneInesistente;
import common.UtenteInesistente;
import common.Playlist;
import common.MyServerException;
import common.ChiaveDuplicata;
import common.EmozioniCanzone;
import common.UtentiRegistrati;
import java.awt.Window;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Lorenzo
 */
public class ConsoleFrame extends javax.swing.JPanel implements InterfacciaServizio {

    private Database db;
    private DataTables dt;

    /**
     * Creates new form ConsoleFrame
     */
    public ConsoleFrame(String user, String pass) {
        initComponents();

        try {
            //ottengo l'istanza singleton dell'oggetto per effettuare le chiamate al database
            this.db = Database.getInstance(user, pass);
            //stampo sulla console visuale un messaggio di avvenuta connesione
            this.txtAreaConsole.append("Connessione al database avvenuta correttamente.");

        } catch (SQLException ex) {
            //PopUp d'errore connessione al database
            JOptionPane.showConfirmDialog(null, "Errore di connessione al database", "Errore di connessione.", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);

            //chiusura del panel
            Window win = SwingUtilities.getWindowAncestor(this);
            win.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaConsole = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        txtAreaConsole.setEditable(false);
        txtAreaConsole.setColumns(20);
        txtAreaConsole.setRows(5);
        jScrollPane1.setViewportView(txtAreaConsole);

        jLabel1.setText("CONSOLE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(476, 476, 476)
                .addComponent(jLabel1)
                .addContainerGap(459, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(179, 179, 179))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(79, 79, 79)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaConsole;
    // End of variables declaration//GEN-END:variables

    @Override
    public synchronized UtentiRegistrati login(String cf, String password) throws UtenteInesistente, PasswordErrata, MyServerException {
        try {
            ResultSet rs = db.submitQuery("SELECT nome,cognome,password FROM utentiregistrati WHERE LOWER(codicefiscale) = LOWER('" + cf + "');");
            dt.checkLogin(rs, password);
            return dt.handleUtenteRegistrato(rs);

        } catch (SQLException ex) {
            throw new MyServerException("LOGIN FAILED - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public void registrazione(UtentiRegistrati utente) throws ChiaveDuplicata, DatiNonValidi, MyServerException {

        try {
            utente.setNome(utente.getNome().replace("'", "''"));
             utente.setCognome(utente.getCognome().replace("'", "''"));
            db.submitQueryUpdate("INSERT INTO utentiregistrati VALUES('" + utente.getCodiceFiscale() + "','"
                    + utente.getNome() + "','"
                    + utente.getCognome() + "','"
                    + utente.getCitta() + "',"
                    + utente.getCap() + ",'"
                    + utente.getVia() + "',"
                    + utente.getCivico() + ",'"
                    + utente.getEmail() + "','"
                    + utente.getPassword() + "')");

        } catch (SQLException ex) {

            if (ex.getSQLState().equals("22001")) {
                txtAreaConsole.append("INSERT ERROR - I dati inseriti non sono validi");
                throw new DatiNonValidi("I dati inseriti non sono validi");
            } else if (ex.getSQLState().equals("23505")) {
                txtAreaConsole.append("INSERT ERROR - Duplicato della chiave primaria");
                throw new ChiaveDuplicata("Duplicato della chiave primaria");
            } else {
                throw new MyServerException("INSERT ERROR - SQL ERROR: " + ex.getSQLState());
            }
        }

    }

    @Override
    public ArrayList<Canzoni> filtraPerTitolo(String titolo) throws CanzoneInesistente, MyServerException {
        try {
            titolo.replace("'", "''");
            ResultSet rs = db.submitQuery("SELECT * FROM canzoni WHERE LOWER(titolo) LIKE LOWER('" + titolo + "%')");
            return dt.handleCanzoniSet(rs);
        } catch (SQLException ex) {
            throw new MyServerException("FILTER BY TITLE FAILED - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public ArrayList<Canzoni> filtraPerAutoreAnno(String autore, int anno) throws CanzoneInesistente, MyServerException {
        try {
            autore.replace("'", "''");
            ResultSet rs = db.submitQuery("SELECT * FROM canzoni WHERE LOWER(autore) LIKE LOWER('" + autore + "%') AND anno = " + anno);
            return dt.handleCanzoniSet(rs);
        } catch (SQLException ex) {
            throw new MyServerException("FILTER BY AUTHOR AND YEAR FAILED - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public ArrayList<Canzoni> getCanzoniForPlaylist() throws MyServerException, CanzoneInesistente {
        try {
            ResultSet rs = db.submitQuery("SELECT * FROM canzoni");
            return dt.handleCanzoniSet(rs);
        } catch (SQLException ex) {
            throw new MyServerException("GET ALL SONGS FAILED - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public Emozioni getEmozioniFromBrano(Canzoni canzone) throws EmozioniInesistenti, MyServerException {
        try {
            canzone.setTitolo(canzone.getTitolo().replace("'", "''"));
            canzone.setAutore(canzone.getAutore().replace("'", "''"));
            ResultSet rsemovalori = db.submitQuery("SELECT idvalutazione, amazement, amazement_notes, nostalgia, nostalgia_notes, calmness, "
                    + "calmness_notes, power, power_notes, joy, joy_notes, tension, tension_notes, sadness, sadness_notes, "
                    + "tenderness, tenderness_notes, solemnity, solemnity_notes"
                    + "FROM emozionicanzone "
                    + " WHERE LOWER(titolo) = LOWER('" + canzone.getTitolo() + "') AND  LOWER (autore) = LOWER('" + canzone.getAutore() + "') AND  anno = " + canzone.getAnno());

            ResultSet rsemomedie = db.submitQuery("SELECT AVG(amazement) AS avg_amazement ,AVG(nostalgia) AS avg_nostalgia , AVG(calmness) AS AVG_calmness, "
                    + "AVG(power) AS avg_power ,AVG(joy) AS avg_joy ,AVG(tension) AS avg_tension , "
                    + "AVG(sadness) AS avg_sadness ,AVG(tenderness) AS avg_tenderness ,AVG(solemnity) AS avg_solemnity "
                    + "FROM emozionicanzone "
                    + "WHERE LOWER(titolo) = LOWER('" + canzone.getTitolo() + "') AND  LOWER (autore) = LOWER('" + canzone.getAutore() + "') AND  anno = " + canzone.getAnno());

            return dt.handleEmozioniSet(rsemovalori, rsemomedie);
        } catch (SQLException ex) {
            throw new MyServerException("GET EMOTION FAILED - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public void createPlaylist(String nomeplaylist, ArrayList<Canzoni> canzoni, String cf) throws ChiaveDuplicata, DatiNonValidi, MyServerException {

        try {
            nomeplaylist.replace("'", "''");
            db.submitQueryUpdate("INSERT INTO playlist (nomeplaylist,codicefiscale) VALUES('" + nomeplaylist + "','" + cf + "')");
            for (int i = 0; i < canzoni.size(); i++) {
                db.submitQueryUpdate("INSERT INTO contiene VALUES('" + "(SELECT idplaylist FROM playlist WHERE LOWER(nomeplaylist) = LOWER('" + nomeplaylist + "') AND LOWER (codicefiscale) = LOWER('" + cf + "')) ','"
                        + canzoni.get(i).getTitolo() + "','"
                        + canzoni.get(i).getAutore() + "','"
                        + canzoni.get(i).getAnno() + "')");
            }


        } catch (SQLException ex) {

            if (ex.getSQLState().equals("22001")) {
                txtAreaConsole.append("INSERT ERROR - I dati inseriti non sono validi");
                throw new DatiNonValidi("I dati inseriti non sono validi");
            } else if (ex.getSQLState().equals("23505")) {
                txtAreaConsole.append("INSERT ERROR - Duplicato per la chiave.");
                throw new ChiaveDuplicata("Chiave duplicata");
            } else {
                throw new MyServerException("INSERT ERROR - SQL ERROR: " + ex.getSQLState());
            }
        }

    }

    @Override
    public ArrayList<Playlist> getPlaylist(String cf) throws MyServerException,PlaylistInesistenti {
            try {
            ResultSet rs = db.submitQuery("SELECT * FROM playlist WHERE LOWER(codicefiscale) = LOWER('" + cf + "')");
            return dt.handlePlaylistSet(rs);
        } catch (SQLException ex) {
            throw new MyServerException("GET PLAYLIST ERROR - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public ArrayList<Canzoni> getCanzoniFromPlaylist(String idPlaylist) throws CanzoneInesistente, MyServerException {
             try {
            ResultSet rs = db.submitQuery("SELECT titolo,autore,anno FROM contiene  WHERE idplaylist = " + idPlaylist);
            return dt.handleCanzoniSet(rs);
        } catch (SQLException ex) {
            throw new MyServerException("GET PLAYLIST ERROR - SQL ERROR: " + ex.getSQLState());
        }
    }

    @Override
    public void inserisciEmozione(String titolo, String autore, int anno, String cf, EmozioniCanzone emocanzone) throws DatiNonValidi, ChiaveDuplicata, MyServerException {
            try {
                titolo.replace("'", "''");
                autore.replace("'", "''");
            db.submitQueryUpdate("INSERT INTO emozionicanzone (titolo,autore,codicefiscale,amazement,nostalgia,calmness,power,joy,tension,sadness," +
                                "tenderness,solemnity,amazement_notes,nostalgia_notes,calmness_notes,power_notes,joy_notes," +
                                "tension_notes,sadness_notes,tenderness_notes,solemnity_notes,anno) " +
                                "VALUES ('" + titolo + "','"  + autore + "','"
                    + cf + "',"
                    + emocanzone.getAmazement() + ",'"
                    + emocanzone.getNostalgia_notes()+ "',"
                    + emocanzone.getCalmness() + ",'"
                    + emocanzone.getPower() + "','"
                    + emocanzone.getJoy()+ "',"
                    + emocanzone.getTension() + ",'"
                    + emocanzone.getSadness() + "',"
                    + emocanzone.getTenderness()+ ",'"
                    + emocanzone.getSolemnity() + "','"
                    + emocanzone.getAmazement_notes() + "',"
                    + emocanzone.getNostalgia_notes() + ",'"
                    + emocanzone.getCalmness_notes() + "',"
                    + emocanzone.getPower_notes() + ",'"
                    + emocanzone.getJoy_notes() + "','"
                    + emocanzone.getTension_notes() + "',"
                    + emocanzone.getSadness_notes() + ",'"
                    + emocanzone.getTenderness_notes() + "',"
                    + emocanzone.getSolemnity_notes() + ",'"
                    + anno + "')"); 
 
        } catch (SQLException ex) {

            if (ex.getSQLState().equals("22001")) {
                txtAreaConsole.append("INSERT ERROR - I dati inseriti non sono validi");
                throw new DatiNonValidi("I dati inseriti non sono validi");
            } else if (ex.getSQLState().equals("23505")) {
                txtAreaConsole.append("INSERT ERROR - Duplicato della chiave primaria");
                throw new ChiaveDuplicata("Duplicato della chiave primaria");
            } else {
                throw new MyServerException("INSERT ERROR - SQL ERROR: " + ex.getSQLState());
            }
        }
    }
}
